#!/bin/sh -e

progname="${0##*/}"

buildargs=
cflag=
rflag=
tflag=
Sflag=

main() {
    while getopts a:crSt opt; do
        case $opt in
	(a)
            buildargs="$buildargs --build-arg $OPTARG"
            ;;
        (c)
            cflag=1
            ;;
        (r)
            rflag=1
            ;;
        (S)
            Sflag=1
            ;;
        (t)
            tflag=1
            ;;
        (\?)
            usage
            ;;
        esac
    done
    shift $(($OPTIND - 1))

    if [ "$cflag" ]; then
        clean "$@"
    else
        build "$@"
    fi

    return 0
}

usage() {
    {
    echo "Usage:"
    echo "  $progname [-a name=value] [-rt] name from-prefix src-dir"
    echo "            fs-dir layers-dir docker-build-proxy"
    echo "      build container"
    echo "          -a   pass --build-arg name=value to docker build"
    echo "          -r   rename layer from hash to container name"
    echo "          -t   save tar fragments"
    echo "          -S   deny shadowing files from the base layer"
    echo "  $progname -c name from-prefix fs-dir layers-dir"
    echo "      clean up container"
    } >&2
    exit 99
}

build () {
    if [ $# -ne 6 ]; then
        usage
    fi
    name="$1"
    from_prefix="$2"
    srcdir="$3"
    fsdir="$4"
    layersdir="$5"
    docker_build_proxy="$6"

    scriptdir="${0%/*}"
    fakeroot="$scriptdir/lockedfakeroot -s $fsdir.fakeroot"
    untar="$scriptdir/untar-docker-image --savelayernames $layersdir/$name.layers"
    if [ "$tflag" ]; then
        untar="$untar --savetarfrags $layersdir/$name"
    fi

    if [ -f $layersdir/$name.layers ]; then
        layer=$(tail -1 $layersdir/$name.layers)
        echo "$progname: Removing old layer $layer"
        $fakeroot rm -rf $fsdir/$layer
    fi

    echo "$progname: Building container $from_prefix$name"
    docker build $docker_build_proxy $buildargs \
           --build-arg FROM_PREFIX=$from_prefix --squash \
           --force-rm=true -t $from_prefix$name \
           $srcdir

    echo "$progname: Extracting container $from_prefix$name"
    mkdir -p $fsdir $layersdir
    docker save $from_prefix$name | $fakeroot $untar $fsdir

    if [ "$Sflag" ]; then
        baselayer=$(head -n 1 $layersdir/$name.layers)
        for layer in $(tail -n +2 $layersdir/$name.layers); do
            shadows=$(layer_shadows $baselayer $layer | sed -e '\,^var/lib/apt/,d' -e '\,^var/lib/dpkg/,d')
            if [ -n "$shadows" ]; then
                echo "$progname: Error: Layer $layer shadows files in base layer $baselayer:"
                echo "$shadows"
                rm -f $layersdir/$name.*
                exit 1
            fi
        done
    fi

    if [ "$rflag" ]; then
        layer=$(tail -1 $layersdir/$name.layers)
        echo "$progname: Renaming layer $layer to $name"
        mv $fsdir/$layer $fsdir/$name
        sed -i "\$s/.*/$name/" $layersdir/$name.layers
    fi
}

layer_shadows() {
    find $fsdir/$1 $fsdir/$2 -type f -printf '%P\n' |
        sort | uniq -c |
        sed -n -e 's/^[[:space:]]*[2-9][0-9]* //p'
}

clean() {
    if [ $# -ne 4 ]; then
        usage
    fi
    name="$1"
    from_prefix="$2"
    fsdir="$3"
    layersdir="$4"

    scriptdir="${0%/*}"
    fakeroot="$scriptdir/lockedfakeroot -s $fsdir.fakeroot"

    echo "$progname: Removing containers"
    docker rmi $from_prefix$name >/dev/null 2>&1 || true
    docker images -f dangling=true -q | xargs -r docker rmi
    # remove only the top layer
    if [ -f $layersdir/$name.layers ]; then
        layer=$(tail -1 $layersdir/$name.layers)
        echo "$progname: Removing $fsdir/$layer"
        $fakeroot rm -rf $fsdir/$layer
    fi
    echo "$progname: Removing $layersdir/$name.*"
    rm -f $layersdir/$name.*
}

main "$@"
