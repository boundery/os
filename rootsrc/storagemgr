#!/bin/sh

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


#
# Global variables
#
# No, most of them don't have to be declared.
# It's just nice to have a list here.
#

progname="${0##*/}"
dflag=
nflag=
pflag=
qflag=
uflag=
vflag=


#
# Main
#

main() {
    parseargs "$@" || return 99

    if [ $uflag ]; then
        unmountall
        return 0
    fi

    if [ $pflag ]; then
        provision "$pflag" 4000
        return $?
    fi

    if [ "$SUBSYSTEM" != block ]; then
        return 0
    fi

    case "$ACTION" in
    (add)
        add "$MDEV"
        return $?
        ;;
    (remove)
        remove "$MDEV"
        return $?
        ;;
    esac

    return 0
}

parseargs() {
    while getopts dnp:quv opt; do
        case $opt in
        (d)
            dflag=1
            ;;
        (n)
            nflag=1
            ;;
        (p)
            pflag="$OPTARG"
            ;;
        (q)
            qflag=1
            ;;
        (u)
            uflag=1
            ;;
        (v)
            vflag=1
            ;;
        (\?)
            usage
            return 1
            ;;
        esac
    done
    shift $(($OPTIND - 1))
    # just ignore the rest of argv

    return 0
}

usage() {
    {
    echo "Usage: $progname [-dknpqv]"
    echo "    -d        daemon mode, log to syslog"
    echo "    -n        dry run, don't execute any action"
    echo "    -p dev    provision new device"
    echo "    -q        quiet, log less"
    echo "    -u        unmount everything"
    echo "    -v        verbose, log more"
    } >&2
}

unmountall() {
    local mnt="/mnt"
    local devs="$(listdir "$mnt" "sd[a-z]*")"

    if [ -d "$mnt/vg00-lv00" ]; then
        run umount "$mnt/vg00-lv00"
        run rmdir "$mnt/vg00-lv00"
    fi
    run lvchange -an vg00/lv00
    local dev
    for dev in $devs; do
        remove $dev
    done
}

provision() {
    local dev="/dev/$1"
    local size="$2"
    local mnt="/mnt/$1"
    local dir="$mnt/prjx/storage"
    local file="$dir/pv0000"

    if ! [ "$size" -ge 16 -a "$size" -le 4000 ] 2>/dev/null; then
        error "\"$size\" must be a number between 16 and 4000"
    fi

    # XXX check $dev and $mnt mount status
    run mkdir -p "$mnt"
    run mount "$dev" "$mnt"
    if [ $? -ne 0 ]; then
        run umount "$mnt"
        error "failed to mount $dev on $mnt"
        return 1
    fi
    if [ -d "$dir" ]; then
        run umount "$mnt"
        error "device $dev is already provisioned"
        return 1
    fi

    info "creating partition file $file size ${size}M"
    run mkdir -p "$dir"
    local verbose=
    if [ $vflag ]; then
        verbose=status=progress
    fi
    run dd if=/dev/zero of="$file" bs=1M count=$size $verbose

    info "creating physical partition"
    local loopdev=`losetup -f --show "$file"`
    if [ $? -ne 0 ]; then
        error "failed to create loopback device for $file"
        return 1
    fi
    run pvcreate "$loopdev"
    if [ $? -ne 0 ]; then
        error "failed to create physical volume for $file on $loopdev"
        run losetup -d "$loopdev"
        return 1
    fi

    info "creating volume group"
    run vgcreate vg00 "$loopdev"
    if [ $? -ne 0 ]; then
        error "failed to create volume group"
        run losetup -d "$loopdev"
        return 1
    fi

    info "creating logical volume"
    run lvcreate -an -nlv00 -l100%FREE vg00
    if [ $? -ne 0 ]; then
        error "failed to create logical volume"
        run losetup -d "$loopdev"
        return 1
    fi

    info "activating logical valume"
    run lvchange -ay --activationmode complete vg00/lv00
    if [ $? -ne 0 ]; then
        error "failed to activate logical volume"
        return 1
    fi
    local vdev="/dev/vg00/lv00"
    waitlv "$vdev"
    if [ $? -ne 0 ]; then
        return 1
    fi

    info "creating filesystem"
    run mkfs -text4 "$vdev"

    info "cleaning up"
    run lvchange -an vg00/lv00
    run losetup -d "$loopdev"
    run umount "$mnt"

    info "attempting to mount new logical volume"
    add "$1"
}

add() {
    local dev="/dev/$1"
    local mnt="/mnt/$1"
    local dir="$mnt/prjx/storage"

    verbose "adding $dev"

    # XXX check $dev and $mnt mount status
    run mkdir -p "$mnt"
    run mount "$dev" "$mnt"
    if [ $? -ne 0 ]; then
        run umount "$mnt"
        error "failed to mount $dev on $mnt"
        return 1
    fi
    if [ ! -d "$dir" ]; then
        run umount "$mnt"
        error "device $dev has not been provisioned"
        return 1
    fi
    local pvs="$(listdir "$dir" "pv[0-9][0-9][0-9][0-9]")"
    if [ "$pvs" = "" ]; then
        run umount "$mnt"
        error "device $dev doesn't have any partition files"
        return 1
    fi
    local pv
    for pv in $pvs; do
        local f="$dir/$pv"
        verbose "adding physical partition $f"
        run losetup -f "$f"
    done

    run lvchange -ay --activationmode complete vg00/lv00
    if [ $? -ne 0 ]; then
        return 1
    fi

    local vdev="/dev/mapper/vg00-lv00"
    local vdir="/mnt/vg00-lv00"
    waitlv "$vdev"
    if [ $? -ne 0 ]; then
        return 1
    fi
    run mkdir -p "$vdir"
    run mount "$vdev" "$vdir"
    if [ $? -ne 0 ]; then
        error "failed to mount logical volume $vdev on $vdir"
        run rmdir "$vdir"
        return 1
    fi
    info "logical volume $vdev mounted on $vdir"
    return 0
}

waitlv() {
    local vdev="$1"

    n=10
    while [ ! -e "$vdev" ]; do
        if [ $n -lt 10 -a $(($n % 2)) -eq 0 ]; then
            info "waiting for logical volume $vdev...$(($n / 2))"
        fi
        n=$(($n - 1))
        if [ $n -lt 0 ]; then
            error "timed out waiting for logical volume $vdev"
            return 1
        fi
        sleep 0.5
    done
    return 0
}

remove() {
    local dev="/dev/$1"
    local mnt="/mnt/$1"
    local dir="$mnt/prjx/storage"

    local pv
    for pv in $(listdir "$dir" "pv[0-9][0-9][0-9][0-9]"); do
        local loopdevs=$(losetup -j "$dir/$pv" | sed 's,^\(/dev/loop[1-9][0-9]*\):.*,\1,')
        local loopdev
        for loopdev in $loopdevs; do
            run losetup -d $loopdev
        done
    done

    sleep 1     # XXX
    run umount "$dev"
    run rmdir "$mnt"
}

listdir() {
    local dir="$1"
    local pat="$2"

    (cd "$dir" && ls -d $pat) 2>/dev/null
}


#
# Logging and debugging
#

log() {
    local prio="$1"
    shift

    if ! [ "$dflag" ]; then
        echo "$*"
        return
    fi
    logger -pdaemon."$prio" -t"$progname" --id=$$ "$*"
}

error() {
    log err "$@"
}

warning() {
    log warning "$@"
}

info() {
    [ "$qflag" ] || log info "$@"
}

verbose() {
    [ "$vflag" ] && log info "$@"
}

run() {
    verbose "$*"
    if [ "$dflag" ]; then
        "$@" 2>/dev/null
    else
        "$@"
    fi
}


#
# Run
#

main "$@"
exit $?
