#!/bin/sh

# Set PATH.
# This does two things:
#     1. Set the path for ourselves.
#     2. Give subprocesses a path.
#        While dash provides a default path if we are started
#        without one, it it not exported.  So do that here.

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

mount -a

hostname `cat /etc/hostname`

syslogd -C512
klogd -c5

echo 5 >/proc/sys/kernel/panic

while read line; do
    line="${line%%#*}"
    [ -z "$line" ] || modprobe $line
done </etc/modules

(netd &)

# Bring up mdev to run storage manager
mkdir -p /tmp/lvm/etc
cp /etc/lvm/lvm.conf /tmp/lvm/etc
mount --bind /tmp/lvm/etc /etc/lvm
echo >/dev/mdev.seq
echo /sbin/mdev >/proc/sys/kernel/hotplug
mdev -s &

# Wait for storage to be mounted, if already provisioned
storaged -i0 -v
if [ $? -ne 0 ]; then
    echo No USB storage provisioned, starting docker on tmpfs
    dockerontmpfs=1
    mount /etc/docker
    mount -osize=256M /var/lib/docker
fi

# Start docker daemon
startdocker
if [ $dockerontmpfs ]; then
    mount -oremount /var/lib/docker
fi

# Provision and expand storage if needed
storaged -i1 -v
if [ $? -ne 0 ]; then
    echo No USB storage available, continuing without persistent storage
    # XXX sleep forever, don't bother going on?
fi

echo Starting zerotier
# XXX Need to put /var/lib/zerotier-one somewhere persistent, so we can
#     upgrade the ZT container.
chmod og+rw /dev/net/tun
if [ -f /boot/zerotier.conf ]; then
     . /boot/zerotier.conf
     docker run --rm -d --net=host -e ZEROTIER_TOKEN=${ZEROTIER_TOKEN} \
            --cap-add=NET_ADMIN --cap-add=SYS_ADMIN --device=/dev/net/tun \
            --name zerotier zerotier

     # XXX Give it a time out for now, for debugging other parts of the system
     #     while zerotier is flaky.  It should always work, so that needs
     #     to be looked into.
     n=20
     while [ -z "$ZTIF" ]; do
         echo "Waiting for Zerotier interface to appear"
         ZTIF=`ip -o link | grep -Eo '^[0-9]+: zt.+: ' | cut -d' ' -f2 | tr -d :`
         if [ $n -le 0 ]; then
             break
         fi
         n=$(($n - 1))
         sleep 1
     done
fi

# Create default networks
#XXX Create a public network, and disable default/docker0
#XXX This should use --internal, so the container can't hit the internet, but
#    that breaks access to other hosts on the zerotier bridge.
docker network rm private >/dev/null 2>&1
docker network create --subnet=172.18.0.0/22 --ip-range=172.18.0.0/23 \
       -d macvlan -o parent=$ZTIF private

echo Starting dnsd
startdnsd -d

#Start the haproxy system container
docker run -d --name haproxy haproxy

# XXX eventually this will be some form of getty
setsid -cw bash -l

docker kill dnsd
docker kill zerotier
startdocker -k
storaged -u -v
netd -k
umount -a
sync
